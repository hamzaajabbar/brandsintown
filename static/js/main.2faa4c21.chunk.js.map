{"version":3,"sources":["components/Search.js","components/Artist.js","components/Event.js","components/ArtistList.js","App.js","serviceWorker.js","index.js"],"names":["Search","Artist","artist","className","src","thumb_url","alt","name","href","facebook_page_url","Event","event","venue","country","city","datetime","ArtistList","useState","search","setSearch","artists","setArtists","events","setEvents","selectedArtist","setSelectedArtist","handleChange","e","target","value","fetch","then","res","json","data","fetchArtists","handleClick","fetchEvents","onChange","type","placeholder","length","map","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAQeA,G,WANA,WACX,OACI,uCCYOC,EAdA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKC,IAAKF,EAAOG,UAAWC,IAAI,aAEpC,yBAAKH,UAAU,aACX,2BAAID,EAAOK,MACX,uBAAGC,KAAMN,EAAOO,mBAAoBP,EAAOO,sB,OCkB5CC,EA1BD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,yBAAKR,UAAU,QACX,yBAAKA,UAAU,cAAf,iBACA,yBAAKA,UAAU,aACX,6BACI,8BAAM,8CACN,8BAAOQ,EAAMC,MAAMC,UAEvB,6BACI,8BAAM,0CACN,8BAAOF,EAAMC,MAAME,OAEvB,6BACI,8BAAM,4CACN,8BAAOH,EAAMC,MAAML,OAEvB,6BACI,8BAAM,0CACN,8BAAOI,EAAMI,cCsDlBC,EApEI,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACbC,EADa,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEbG,EAFa,KAEJC,EAFI,OAGSJ,mBAAS,IAHlB,mBAGbK,EAHa,KAGLC,EAHK,OAIyBN,mBAAS,MAJlC,mBAIbO,EAJa,KAIGC,EAJH,KAkBfC,EAAe,SAACC,GAClBR,EAAUQ,EAAEC,OAAOC,OACI,KAAnBF,EAAEC,OAAOC,MACTR,EAAW,IAfE,SAACH,GAClBY,MAAM,wCAAwCZ,EAAO,6CAA6Ca,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC7GF,MAAK,SAAAG,GAAI,OACNb,EAAW,CAACa,OAchBC,CAAaR,EAAEC,OAAOC,QAIxBO,EAAc,SAAClC,GACjBuB,EAAkBvB,GAhBF,SAACA,GACjB4B,MAAM,wCAAwC5B,EAAOK,KAAK,oDAAoDwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACzHF,MAAK,SAAAG,GAAI,OACNX,EAAUW,MAclBG,CAAYnC,IAShB,OACI,qCACMsB,GACF,oCAAE,yBAAKrB,UAAU,cACb,2BAAOA,UAAU,eAAe0B,MAAOX,EAAQoB,SAAU,SAACX,GAAD,OAAOD,EAAaC,IAAIY,KAAK,OAAOhC,KAAK,GAAGiC,YAAY,kBACjH,0BAAMrC,UAAU,iBAElBiB,EAAQqB,OAAS,GAAK,2BAAIrB,EAAQqB,OAAZ,sBAAuCvB,GAC/D,yBAAKf,UAAU,cAEPiB,EAAQsB,KAAI,SAACxC,GAAD,OAAa,0BAAMyC,QAAS,kBAAMP,EAAYlC,KAAS,kBAAC,EAAD,CAAQA,OAAQA,WAGpF,oCACH,uBAAGC,UAAU,kBAAkBwC,QAnBxB,WACfpB,EAAU,IACVE,EAAkB,QAiBV,mBACA,yBAAKtB,UAAU,cACX,kBAAC,EAAD,CAAQD,OAAQsB,KAElBF,EAAOmB,OAAS,GAAK,uBAAGtC,UAAU,mBAAmBmB,EAAOmB,OAAvC,oBACvB,yBAAKtC,UAAU,iBAEPmB,EAAOoB,KAAI,SAAC/B,GAAD,OAAY,kBAAC,EAAD,CAAOA,MAAOA,WChD9CiC,MAXf,WACE,OACI,yBAAKzC,UAAU,aACb,yBAAKA,UAAU,mBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAQ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2faa4c21.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst Search = () => {\n    return (\n        <></>\n    );\n}\n\nexport default Search;","import React, {useState} from \"react\";\n\nconst Artist = ({ artist }) => {\n    return (\n        <div className=\"card\">\n            <div className=\"user-img\">\n                <img src={artist.thumb_url} alt=\"profile\" />\n            </div>\n            <div className=\"user-info\">\n                <p>{artist.name}</p>\n                <a href={artist.facebook_page_url}>{artist.facebook_page_url}</a>\n            </div>\n        </div>\n    );\n}\n\nexport default Artist;","import React, {useState} from \"react\";\n\nconst Event = ({ event }) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-title\">Event Details</div>\n            <div className=\"card-info\">\n                <div>\n                    <span><strong> Country </strong></span>\n                    <span>{event.venue.country}</span>\n                </div>\n                <div>\n                    <span><strong>City </strong></span>\n                    <span>{event.venue.city}</span>\n                </div>\n                <div>\n                    <span><strong> Venue </strong></span>\n                    <span>{event.venue.name}</span>\n                </div>\n                <div>\n                    <span><strong> Date</strong></span>\n                    <span>{event.datetime}</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Event;","import React, {useState} from \"react\";\nimport Artist from \"./Artist\";\nimport EventList from \"./EventList\";\nimport Event from \"./Event\";\n// import debounce from \"lodash.debounce\";\n\n\nconst ArtistList = () => {\n    const [ search, setSearch ] = useState(\"\");\n    const [ artists, setArtists ] = useState([]);\n    const [ events, setEvents ] = useState([]);\n    const [ selectedArtist, setSelectedArtist ] = useState(null);\n\n    const fetchArtists = (search) => {\n        fetch(\"https://rest.bandsintown.com/artists/\"+search+\"/?app_id=1fe6b91037199181ed78c0a5ba6a810c\").then(res => res.json())\n            .then(data =>\n                setArtists([data])\n            )\n    }\n    const fetchEvents = (artist) => {\n        fetch(\"https://rest.bandsintown.com/artists/\"+artist.name+\"/events/?app_id=1fe6b91037199181ed78c0a5ba6a810c\").then(res => res.json())\n            .then(data =>\n                setEvents(data)\n            )\n    }\n    const handleChange = (e) => {\n        setSearch(e.target.value);\n        if (e.target.value === \"\") {\n            setArtists([]);\n        } else {\n            fetchArtists(e.target.value);\n        }\n    }\n\n    const handleClick = (artist) => {\n        setSelectedArtist(artist);\n        fetchEvents(artist)\n    }\n\n\n    const handleBack = () => {\n        setEvents([]);\n        setSelectedArtist(null);\n    }\n\n    return (\n        <>\n            {!selectedArtist &&\n            <><div className=\"search-bar\">\n                <input className=\"form-control\" value={search} onChange={(e) => handleChange(e)} type=\"text\" name=\"\" placeholder=\"Search artist\"/>\n                <span className=\"search-icon\"/>\n            </div>\n            { artists.length > 0 && <p>{artists.length} Results found for {search}</p>}\n            <div className=\"user-block\">\n                {\n                    artists.map((artist) => (<span onClick={() => handleClick(artist)}><Artist artist={artist} /></span>))\n                }\n            </div>\n            </> || <>\n                <p className=\"back-to-results\" onClick={handleBack}>Back to results</p>\n                <div className=\"user-block\">\n                    <Artist artist={selectedArtist} />\n                </div>\n                { events.length > 0 && <p className=\"upcoming-events\">{events.length} upcoming events</p>}\n                <div className=\"event-details\">\n                    {\n                        events.map((event) => (<Event event={event} />))\n                    }\n                </div>\n                </>\n            }\n        </>\n    );\n}\n\nexport default ArtistList;","import React from 'react';\nimport './App.css';\n\nimport Search from \"./components/Search\";\nimport Artist from \"./components/Artist\";\nimport ArtistList from \"./components/ArtistList\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <div className=\"content-wrapper\">\n            <Search/>\n            <ArtistList/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}